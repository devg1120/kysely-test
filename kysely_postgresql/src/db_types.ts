/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Foo {
  col_array: number[];
  col_array_null: number[] | null;
  col_bigint: Int8;
  col_bigint_null: Int8 | null;
  col_bigserial: Generated<Int8>;
  col_boolean: boolean;
  col_boolean_null: boolean | null;
  col_char: string;
  col_char_null: string | null;
  col_composite: string;
  col_composite_array: string[];
  col_composite_array_null: string[] | null;
  col_composite_null: string | null;
  col_date: Timestamp;
  col_date_null: Timestamp | null;
  col_double: number;
  col_double_null: number | null;
  col_int: number;
  col_int_null: number | null;
  col_json: Json;
  col_json_null: Json | null;
  col_numeric: Numeric;
  col_numeric_null: Numeric | null;
  col_real: number;
  col_real_null: number | null;
  col_serial: Generated<number>;
  col_smallint: number;
  col_smallint_null: number | null;
  col_text: string;
  col_text_null: string | null;
  col_time: string;
  col_time_null: string | null;
  col_time_with: string;
  col_time_with_null: string | null;
  col_timestamp: Timestamp;
  col_timestamp_null: Timestamp | null;
  col_timestamp_with: Timestamp;
  col_timestamp_with_null: Timestamp | null;
  col_uuid: string;
  col_uuid_null: string | null;
}

export interface DB {
  foo: Foo;
}
